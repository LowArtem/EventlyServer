version: "3.9"
services:
  postgres:
    container_name: postgres_container
    image: postgres:15.0
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./InitDb:/docker-entrypoint-initdb.d
      - .:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: 0.5
          memory: 0.8G
    networks:
      - inholiday

  backend:
    container_name: web_container
    image: ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_VERSION}
    command: dotnet EventlyServer.dll
    environment:
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_NAME}
      AUTH_SECRET_KEY: ${AUTH_SECRET_KEY}
      ASPNETCORE_URLS: "http://*:5000;"
    ports:
      - "5000:5000"
    working_dir: /app
    restart: unless-stopped
    networks:
      - inholiday
    depends_on:
      - postgres
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  client:
    container_name: web_client
    image: lowartem/inholiday-client:latest
    restart: unless-stopped
    networks:
      - inholiday
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  proxy:
    container_name: proxy_container
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    restart: unless-stopped
    networks:
      - inholiday

  logger:
    container_name: seq
    image: lowartem/seq
    ports:
      - "5341:80"
    restart: unless-stopped
    networks:
      - inholiday

  watchtower:
    container_name: watchtower_container
    image: containrrr/watchtower
    environment:
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_HTTP_API_UPDATE=true
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${WATCHTOWER_PORT}:8080"

networks:
  inholiday:
    driver: bridge
